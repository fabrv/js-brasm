[
  {
    "description": "expr",
    "grammar": "<expr><bin_op><expr>"
  },
  {
    "description": "expr",
    "grammar": "<literal><bin_op><literal>"
  },
  {
    "description": "expr",
    "grammar": "<location><bin_op><location>"
  },
  {
    "description": "expr",
    "grammar": "<literal><bin_op><location>"
  },
  {
    "description": "expr",
    "grammar": "<location><bin_op><literal>"
  },
  {
    "description": "expr",
    "grammar": "<expr><bin_op><location>"
  },
  {
    "description": "expr",
    "grammar": "<location><bin_op><expr>"
  },
  {
    "description": "expr",
    "grammar": "<literal><bin_op><expr>"
  },
  {
    "description": "expr",
    "grammar": "<expr><bin_op><literal>"
  },


  {
    "description": "expr",
    "grammar": "<paren_expr><bin_op><location>"
  },
  {
    "description": "expr",
    "grammar": "<location><bin_op><paren_expr>"
  },
  {
    "description": "expr",
    "grammar": "<literal><bin_op><paren_expr>"
  },
  {
    "description": "expr",
    "grammar": "<paren_expr><bin_op><literal>"
  },
  {
    "description": "expr",
    "grammar": "<paren_expr><bin_op><expr>"
  },
  {
    "description": "expr",
    "grammar": "<expr><bin_op><paren_expr>"
  },
  {
    "description": "expr",
    "grammar": "<paren_expr><bin_op><paren_expr>"
  },


  {
    "description": "expr",
    "grammar": "<method_call>"
  },
  {
    "description": "paren_expr",
    "grammar": "lparen <expr> rparen"
  },
  {
    "description": "expr",
    "grammar": "not <expr>"
  },
  {
    "description": "literal",
    "grammar": "char_literal"
  },
  {
    "description": "literal",
    "grammar": "string_literal"
  },
  {
    "description": "literal",
    "grammar": "bool_literal"
  },
  {
    "description": "literal",
    "grammar": "int_lit"
  },
  {
    "description": "bin_op",
    "grammar": "arith_op"
  },
  {
    "description": "bin_op",
    "grammar": "rel_op"
  },
  {
    "description": "bin_op",
    "grammar": "eq_op"
  },
  {
    "description": "bin_op",
    "grammar": "not_op"
  },
  {
    "description": "bin_op",
    "grammar": "cond_op"
  },
  {
    "description": "var_decl",
    "grammar": "<type><location> semicolon"
  },
  {
    "description": "statement",
    "grammar": "<location> assign_op <expr> semicolon"
  },
  {
    "description": "statement",
    "grammar": "<location> assign_op <literal> semicolon"
  },
  {
    "description": "statement",
    "grammar": "<location> assign_op <location> semicolon"
  },
  {
    "description": "else_block",
    "grammar": "else <block>"
  },
  {
    "description": "statement",
    "grammar": "if <paren_expr> <block> <else_block>?"
  },
  {
    "description": "statement",
    "grammar": "return <expr>? semicolon"
  },
  {
    "description": "statement",
    "grammar": "break semicolon"
  },
  {
    "description": "statement",
    "grammar": "return <paren_expr>? semicolon"
  },
  {
    "description": "statement",
    "grammar": "return <literal>? semicolon"
  },
  {
    "description": "statement",
    "grammar": "return <location>? semicolon"
  },
  {
    "description": "statement",
    "grammar": "break semicolon"
  },
  {
    "description": "statement",
    "grammar": "continue semicolon"
  },
  {
    "description": "block",
    "grammar": "lbracket <var_decl>+ <statement>+ <block>+ rbracket"
  },
  {
    "description": "location",
    "grammar": "<location> lbracket <expr> rbracket"
  },
  {
    "description": "location",
    "grammar": "<location> lbracket <literal> rbracket"
  },
  {
    "description": "location",
    "grammar": "identifier"
  },
  {
    "description": "method_call",
    "grammar": "<location> lparen <expr>, rparen"
  }
]