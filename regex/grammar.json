[
  {
    "description": "expr",
    "grammar": "<expr><bin_op><expr>"
  },
  {
    "description": "expr",
    "grammar": "<literal><bin_op><literal>"
  },
  {
    "description": "expr",
    "grammar": "<location><bin_op><location>"
  },
  {
    "description": "expr",
    "grammar": "<literal><bin_op><location>"
  },
  {
    "description": "expr",
    "grammar": "<location><bin_op><literal>"
  },
  {
    "description": "expr",
    "grammar": "<expr><bin_op><location>"
  },
  {
    "description": "expr",
    "grammar": "<location><bin_op><expr>"
  },
  {
    "description": "expr",
    "grammar": "<literal><bin_op><expr>"
  },
  {
    "description": "expr",
    "grammar": "<expr><bin_op><literal>"
  },
  {
    "description": "expr",
    "grammar": "<paren_expr><bin_op><location>"
  },
  {
    "description": "expr",
    "grammar": "<location><bin_op><paren_expr>"
  },
  {
    "description": "expr",
    "grammar": "<literal><bin_op><paren_expr>"
  },
  {
    "description": "expr",
    "grammar": "<paren_expr><bin_op><literal>"
  },
  {
    "description": "expr",
    "grammar": "<paren_expr><bin_op><expr>"
  },
  {
    "description": "expr",
    "grammar": "<expr><bin_op><paren_expr>"
  },
  {
    "description": "expr",
    "grammar": "<paren_expr><bin_op><paren_expr>"
  },



  {
    "description": "expr",
    "grammar": "<location> lparen <expr_comma>+ <expr> rparen <bin_op> <paren_expr>"
  },
  {
    "description": "expr",
    "grammar": "<location> lparen <expr_comma>+ <expr> rparen <bin_op> <literal>"
  },
  {
    "description": "expr",
    "grammar": "<location> lparen <expr_comma>+ <expr> rparen <bin_op> <expr>"
  },
  {
    "description": "expr",
    "grammar": "<location> lparen <expr_comma>+ <expr> rparen <bin_op> <location>"
  },
  {
    "description": "expr",
    "grammar": "<location> lparen <expr_comma>+ <expr> rparen <bin_op> <location> lparen <expr_comma>+ <expr> rparen"
  },
  {
    "description": "expr",
    "grammar": "<paren_expr> <bin_op> <location> lparen <expr_comma>+ <expr> rparen"
  },
  {
    "description": "expr",
    "grammar": "<literal> <bin_op> <location> lparen <expr_comma>+ <expr> rparen"
  },
  {
    "description": "expr",
    "grammar": "<expr> <bin_op> <location> lparen <expr_comma>+ <expr> rparen"
  },
  {
    "description": "expr",
    "grammar": "<location> <bin_op> <location> lparen <expr_comma>+ <expr> rparen"
  },




  {
    "description": "expr",
    "grammar": "<location> <paren_expr> <bin_op> <paren_expr>"
  },
  {
    "description": "expr",
    "grammar": "<location> <paren_expr> <bin_op> <literal>"
  },
  {
    "description": "expr",
    "grammar": "<location> <paren_expr> <bin_op> <expr>"
  },
  {
    "description": "expr",
    "grammar": "<location> <paren_expr> <bin_op> <location>"
  },
  {
    "description": "expr",
    "grammar": "<location> <paren_expr> <bin_op> <location> <paren_expr>"
  },
  {
    "description": "expr",
    "grammar": "<paren_expr> <bin_op> <location> <paren_expr>"
  },
  {
    "description": "expr",
    "grammar": "<literal> <bin_op> <location> <paren_expr>"
  },
  {
    "description": "expr",
    "grammar": "<expr> <bin_op> <location> <paren_expr>"
  },
  {
    "description": "expr",
    "grammar": "<location> <bin_op> <location> <paren_expr>"
  },
  {
    "description": "expr",
    "grammar": "<location> <paren_expr> <bin_op> <location> <paren_expr>"
  },









  {
    "description": "paren_expr",
    "grammar": "lparen <expr> rparen"
  },
  {
    "description": "paren_expr",
    "grammar": "lparen <literal> rparen"
  },
  {
    "description": "paren_expr",
    "grammar": "lparen <locatiom> rparen"
  },
  {
    "description": "paren_expr",
    "grammar": "lparen <paren_expr> rparen"
  },


  {
    "description": "paren_expr",
    "grammar": "lparen <location> lparen <expr_comma>+ <expr> rparen rparen"
  },
  {
    "description": "paren_expr",
    "grammar": "lparen <location> lparen <expr_comma>+ <literal> rparen rparen"
  },
  {
    "description": "paren_expr",
    "grammar": "lparen <location> lparen <expr_comma>+ <location> rparen rparen"
  },
  {
    "description": "paren_expr",
    "grammar": "lparen <location> lparen <expr_comma>+ <paren_expr> rparen rparen"
  },

  {
    "description": "paren_expr",
    "grammar": "lparen <location> <paren_expr> rparen"
  },

  {
    "description": "expr",
    "grammar": "not <expr>"
  },
  {
    "description": "expr",
    "grammar": "not <literal>"
  },
  {
    "description": "expr",
    "grammar": "not <paren_expr>"
  },
  {
    "description": "expr",
    "grammar": "not <location>"
  },
  {
    "description": "expr",
    "grammar": "not <location> lparen <expr_comma>+ <expr> rparen"
  },
  {
    "description": "literal",
    "grammar": "char_literal"
  },
  {
    "description": "literal",
    "grammar": "string_literal"
  },
  {
    "description": "literal",
    "grammar": "bool_literal"
  },
  {
    "description": "literal",
    "grammar": "int_lit"
  },
  {
    "description": "bin_op",
    "grammar": "arith_op"
  },
  {
    "description": "bin_op",
    "grammar": "rel_op"
  },
  {
    "description": "bin_op",
    "grammar": "eq_op"
  },
  {
    "description": "bin_op",
    "grammar": "not_op"
  },
  {
    "description": "bin_op",
    "grammar": "cond_op"
  },
  {
    "description": "location_comma",
    "grammar": "<location> comma"
  },
  {
    "description": "var_decl",
    "grammar": "<type> <location_comma>+ <location> semicolon"
  },
  {
    "description": "statement",
    "grammar": "<location> assign_op <expr> semicolon"
  },
  {
    "description": "statement",
    "grammar": "<location> assign_op <literal> semicolon"
  },
  {
    "description": "statement",
    "grammar": "<location> assign_op <location> semicolon"
  },


  {
    "description": "statement",
    "grammar": "for location assign_op <expr_comma> <expr> <block>"
  },
  {
    "description": "statement",
    "grammar": "for location assign_op <expr_comma> <paren_expr> <block>"
  },
  {
    "description": "statement",
    "grammar": "for location assign_op <expr_comma> <literal> <block>"
  },
  {
    "description": "statement",
    "grammar": "for location assign_op <expr_comma> <location> <block>"
  },

  {
    "description": "statement",
    "grammar": "<method_call>"
  },

  {
    "description": "else_block",
    "grammar": "else <block>"
  },
  {
    "description": "statement",
    "grammar": "if <paren_expr> <block> <else_block>?"
  },
  {
    "description": "statement",
    "grammar": "return <expr>? semicolon"
  },
  {
    "description": "statement",
    "grammar": "break semicolon"
  },
  {
    "description": "statement",
    "grammar": "return <paren_expr>? semicolon"
  },
  {
    "description": "statement",
    "grammar": "return <literal>? semicolon"
  },
  {
    "description": "statement",
    "grammar": "return <location>? semicolon"
  },
  {
    "description": "statement",
    "grammar": "break semicolon"
  },
  {
    "description": "statement",
    "grammar": "continue semicolon"
  },
  {
    "description": "block",
    "grammar": "lbracket <var_decl>+ <statement>+ <block>+ rbracket"
  },
  {
    "description": "location",
    "grammar": "<location> lbracket <expr> rbracket"
  },
  {
    "description": "location",
    "grammar": "<location> lbracket <literal> rbracket"
  },
  {
    "description": "location",
    "grammar": "identifier"
  },
  {
    "description": "expr_comma",
    "grammar": "<expr> comma"
  },
  {
    "description": "expr_comma",
    "grammar": "<literal> comma"
  },
  {
    "description": "expr_comma",
    "grammar": "<paren_expr> comma"
  },
  {
    "description": "expr_comma",
    "grammar": "<location> comma"
  },
 
  {
    "description": "method_call",
    "grammar": "<location> lparen <expr_comma>+ <expr> rparen semicolon"
  },
  {
    "description": "method_call",
    "grammar": "<location> lparen <expr_comma>+ <literal> rparen semicolon"
  },
  {
    "description": "method_call",
    "grammar": "<location> lparen <expr_comma>+ <location> rparen semicolon"
  },
  {
    "description": "method_call",
    "grammar": "<location> lparen <expr_comma>+ <paren_expr> rparen semicolon"
  },

  {
    "description": "method_call",
    "grammar": "<location> lparen rparen semicolon"
  },

  {
    "description": "method_call",
    "grammar": "callout <paren_expr> semicolon"
  },

  {
    "description": "param_decl",
    "grammar": "type <location_comma>"
  },

  {
    "description": "method_decl",
    "grammar": "<type> <location> lparen <param_decl>+ type? <location>? rparen <block>"
  },

  {
    "description": "class_decl",
    "grammar": "class location lbracket <var_decl>+ <method_decl>+ rbracket"
  }
]